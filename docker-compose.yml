version: "3"

services:
  ######################################################################################################################
  ### PHP FPM Container
  ######################################################################################################################
  php-fpm:
    container_name: ${PROJECT_NAMESPACE}_php_fpm
    build:
      context: .
      dockerfile: .docker/php-fpm/Dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
    restart: unless-stopped
    volumes:
      - source-code:${PROJECT_ROOT}:nocopy
    env_file:
      - .env
    networks:
      - magento2_dev
    links:
      - mysql
      - redis-cache
      - redis-page-cache
      - redis-session
  ######################################################################################################################
  ### PHP CLI Container
  ######################################################################################################################
  php-cli:
    container_name: ${PROJECT_NAMESPACE}_php_cli
    build:
      context: .
      dockerfile: .docker/php-cli/Dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
    restart: unless-stopped
    volumes:
      - source-code:${PROJECT_ROOT}:nocopy
    env_file:
      - .env
    networks:
      - magento2_dev
    tty: true
    links:
      - mysql
      - redis-cache
      - redis-page-cache
      - redis-session
  ######################################################################################################################
  ### PHP Cron Job Container
  ######################################################################################################################
  php-cron:
    container_name: ${PROJECT_NAMESPACE}_php_cron
    build:
      context: .
      dockerfile: .docker/php-cron/Dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
    restart: unless-stopped
    volumes:
      - source-code:${PROJECT_ROOT}:nocopy
    networks:
      - magento2_dev
    links:
      - mysql
      - redis-cache
      - redis-page-cache
      - redis-session
    env_file:
      - .env
  ######################################################################################################################
  ### NGINX Container
  ######################################################################################################################
  nginx:
    container_name: ${PROJECT_NAMESPACE}_nginx
    build:
      context: .
      dockerfile: .docker/nginx/Dockerfile
      args:
        - NGINX_PORT=${NGINX_PORT}
        - NGINX_PROXY=${NGINX_PROXY}
        - PROJECT_URL=${PROJECT_URL}
        - PROJECT_DOMAIN=${PROJECT_DOMAIN}
        - PROJECT_ROOT=${PROJECT_ROOT}
        - TIME_ZONE=${TIME_ZONE}
    restart: unless-stopped
    volumes:
      - source-code:${PROJECT_ROOT}:nocopy
    ports:
      - "443:443"
    env_file:
      - .env
    networks:
      - magento2_dev
    links:
      - php-fpm
  ######################################################################################################################
  ### Database Container
  ######################################################################################################################
  mysql:
    container_name: ${PROJECT_NAMESPACE}_mysql
    build:
      context: .
      dockerfile: .docker/mysql/Dockerfile
    restart: unless-stopped
    volumes:
      - database:/var/lib/mysql
    env_file:
      - .env
    networks:
      - magento2_dev
  ######################################################################################################################
  ### Database Management Container
  ######################################################################################################################
  phpmyadmin:
    container_name: ${PROJECT_NAMESPACE}_phpmyadmin
    hostname: phpmyadmin
    image: phpmyadmin/phpmyadmin
    ports:
      - "8888:80"
    depends_on:
      - mysql
    networks:
      - magento2_dev
    environment:
      - PMA_HOST=mysql
      - PMA_USER=root
      - PMA_PASSWORD=${MYSQL_ROOT_PASSWORD}
  ######################################################################################################################
  ### Redis Container for default cache
  ######################################################################################################################
  redis-cache:
    container_name: ${PROJECT_NAMESPACE}_redis_cache
    build:
      context: .
      dockerfile: .docker/redis/Dockerfile
      args:
        - ALPINE_VERSION=${ALPINE_VERSION}
    restart: unless-stopped
    volumes:
      - redis-cache:/data
    env_file:
      - .env
    networks:
      - magento2_dev
    tty: true
  ######################################################################################################################
  ### Redis Container for full page cache
  ######################################################################################################################
  redis-page-cache:
    container_name: ${PROJECT_NAMESPACE}_redis_page_cache
    build:
      context: .
      dockerfile: .docker/redis/Dockerfile
      args:
        - ALPINE_VERSION=${ALPINE_VERSION}
    restart: unless-stopped
    volumes:
      - redis-page-cache:/data
    env_file:
      - .env
    networks:
      - magento2_dev
    tty: true
  ######################################################################################################################
  ### Redis Container for session
  ######################################################################################################################
  redis-session:
    container_name: ${PROJECT_NAMESPACE}_redis_session
    build:
      context: .
      dockerfile: .docker/redis/Dockerfile
      args:
        - ALPINE_VERSION=${ALPINE_VERSION}
    restart: unless-stopped
    volumes:
      - redis-session:/data
    env_file:
      - .env
    networks:
      - magento2_dev
    tty: true
  ######################################################################################################################
  ### Varnish Proxy Container
  ######################################################################################################################
  varnish:
    container_name: ${PROJECT_NAMESPACE}_varnish
    build:
      context: .
      dockerfile: .docker/varnish/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - magento2_dev
    links:
      - nginx
    ports:
      - "80:80"
  ######################################################################################################################
  ### RabbitMQ Messaging Queuing System
  ######################################################################################################################
  rabbitmq:
    container_name: ${PROJECT_NAMESPACE}_rabbitmq
    image: rabbitmq:3.7.8-management
    volumes:
      - 'rabbitmq_data:/data'
    environment:
      - RABBITMQ_DEFAULT_USER=${MAGENTO_AMQP_USER}
      - RABBITMQ_DEFAULT_PASS=${MAGENTO_AMQP_PASSWORD}
    networks:
      - magento2_dev
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
  ######################################################################################################################
  ### ElasticSearch Container
  ######################################################################################################################
  elasticsearch:
    container_name: ${PROJECT_NAMESPACE}_elasticsearch
    build:
      context: .
      dockerfile: .docker/elasticsearch/Dockerfile
    restart: unless-stopped
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - xpack.security.enabled=false
      - cluster.name=magento-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2048m -Xmx2048m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - magento2_dev
  ######################################################################################################################
  ### LogStash Container
  ######################################################################################################################
  logstash:
    container_name: ${PROJECT_NAMESPACE}_logstash
    image: docker.elastic.co/logstash/logstash:6.5.4
    depends_on:
      - elasticsearch
    ports:
      - 12201:12201/udp
    volumes:
      - .docker/logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    networks:
      - magento2_dev
  ######################################################################################################################
  ### Kibana Container
  ######################################################################################################################
  kibana:
    container_name: ${PROJECT_NAMESPACE}_kibana
    image: docker.elastic.co/kibana/kibana:6.5.4
    depends_on:
      - logstash
    ports:
      - 5601:5601
    networks:
      - magento2_dev
  ######################################################################################################################
  ### MailHog for Email Catching System
  ######################################################################################################################
  mailhog:
    container_name: ${PROJECT_NAMESPACE}_mailhog
    image: mailhog/mailhog
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - magento2_dev
########################################################################################################################
### Volumes Containers
########################################################################################################################
volumes:
  source-code:
  database:
  redis-cache:
  redis-page-cache:
  redis-session:
  rabbitmq_data:
  elasticsearch:
########################################################################################################################
### Networks
########################################################################################################################
networks:
  magento2_dev:
    driver: bridge